/*
 * Ason Payroll Integration API v1
 * Integration API for the system provider [<a target=\"_blank\" href='https://ason.ch'>v0.3.0-pre-230213</a>]
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {ObjectStatus} from './ObjectStatus';
import {PayrunJobEmployee} from './PayrunJobEmployee';
import {PayrunJobResult} from './PayrunJobResult';
import {PayrunJobStatus} from './PayrunJobStatus';
import {RetroPayMode} from './RetroPayMode';

/**
 * The PayrunJob model module.
 * @module model/PayrunJob
 * @version 1
 */
export class PayrunJob {
  /**
   * Constructs a new <code>PayrunJob</code>.
   * The payrun job API object
   * @alias module:model/PayrunJob
   * @class
   * @param name {String} The payrun job name (immutable)
   * @param payrunId {Number} The payrun id (immutable)
   * @param payrollId {Number} The payroll id (immutable)
   * @param userId {Number} The user id (immutable)
   * @param cycleName {String} The cycle name (immutable)
   * @param cycleStart {Date} The cycle start date (immutable)
   * @param cycleEnd {Date} The cycle end date (immutable)
   * @param periodName {String} The period name (immutable)
   * @param periodStart {Date} The period start date (immutable)
   * @param periodEnd {Date} The period end date (immutable)
   * @param evaluationDate {Date} The evaluation date (immutable)
   * @param reason {String} The execution reason (immutable)
   * @param jobStart {Date} The job start date (immutable)
   */
  constructor(name, payrunId, payrollId, userId, cycleName, cycleStart, cycleEnd, periodName, periodStart, periodEnd, evaluationDate, reason, jobStart) {
    this.name = name;
    this.payrunId = payrunId;
    this.payrollId = payrollId;
    this.userId = userId;
    this.cycleName = cycleName;
    this.cycleStart = cycleStart;
    this.cycleEnd = cycleEnd;
    this.periodName = periodName;
    this.periodStart = periodStart;
    this.periodEnd = periodEnd;
    this.evaluationDate = evaluationDate;
    this.reason = reason;
    this.jobStart = jobStart;
  }

  /**
   * Constructs a <code>PayrunJob</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PayrunJob} obj Optional instance to populate.
   * @return {module:model/PayrunJob} The populated <code>PayrunJob</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PayrunJob();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('status'))
        obj.status = ObjectStatus.constructFromObject(data['status']);
      if (data.hasOwnProperty('created'))
        obj.created = ApiClient.convertToType(data['created'], 'Date');
      if (data.hasOwnProperty('updated'))
        obj.updated = ApiClient.convertToType(data['updated'], 'Date');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('owner'))
        obj.owner = ApiClient.convertToType(data['owner'], 'String');
      if (data.hasOwnProperty('payrunId'))
        obj.payrunId = ApiClient.convertToType(data['payrunId'], 'Number');
      if (data.hasOwnProperty('payrollId'))
        obj.payrollId = ApiClient.convertToType(data['payrollId'], 'Number');
      if (data.hasOwnProperty('divisionId'))
        obj.divisionId = ApiClient.convertToType(data['divisionId'], 'Number');
      if (data.hasOwnProperty('userId'))
        obj.userId = ApiClient.convertToType(data['userId'], 'Number');
      if (data.hasOwnProperty('parentJobId'))
        obj.parentJobId = ApiClient.convertToType(data['parentJobId'], 'Number');
      if (data.hasOwnProperty('retroPayMode'))
        obj.retroPayMode = RetroPayMode.constructFromObject(data['retroPayMode']);
      if (data.hasOwnProperty('jobStatus'))
        obj.jobStatus = PayrunJobStatus.constructFromObject(data['jobStatus']);
      if (data.hasOwnProperty('jobResult'))
        obj.jobResult = PayrunJobResult.constructFromObject(data['jobResult']);
      if (data.hasOwnProperty('tags'))
        obj.tags = ApiClient.convertToType(data['tags'], ['String']);
      if (data.hasOwnProperty('forecast'))
        obj.forecast = ApiClient.convertToType(data['forecast'], 'String');
      if (data.hasOwnProperty('culture'))
        obj.culture = ApiClient.convertToType(data['culture'], 'String');
      if (data.hasOwnProperty('cycleName'))
        obj.cycleName = ApiClient.convertToType(data['cycleName'], 'String');
      if (data.hasOwnProperty('cycleStart'))
        obj.cycleStart = ApiClient.convertToType(data['cycleStart'], 'Date');
      if (data.hasOwnProperty('cycleEnd'))
        obj.cycleEnd = ApiClient.convertToType(data['cycleEnd'], 'Date');
      if (data.hasOwnProperty('periodName'))
        obj.periodName = ApiClient.convertToType(data['periodName'], 'String');
      if (data.hasOwnProperty('periodStart'))
        obj.periodStart = ApiClient.convertToType(data['periodStart'], 'Date');
      if (data.hasOwnProperty('periodEnd'))
        obj.periodEnd = ApiClient.convertToType(data['periodEnd'], 'Date');
      if (data.hasOwnProperty('evaluationDate'))
        obj.evaluationDate = ApiClient.convertToType(data['evaluationDate'], 'Date');
      if (data.hasOwnProperty('reason'))
        obj.reason = ApiClient.convertToType(data['reason'], 'String');
      if (data.hasOwnProperty('totalEmployeeCount'))
        obj.totalEmployeeCount = ApiClient.convertToType(data['totalEmployeeCount'], 'Number');
      if (data.hasOwnProperty('processedEmployeeCount'))
        obj.processedEmployeeCount = ApiClient.convertToType(data['processedEmployeeCount'], 'Number');
      if (data.hasOwnProperty('jobStart'))
        obj.jobStart = ApiClient.convertToType(data['jobStart'], 'Date');
      if (data.hasOwnProperty('jobEnd'))
        obj.jobEnd = ApiClient.convertToType(data['jobEnd'], 'Date');
      if (data.hasOwnProperty('message'))
        obj.message = ApiClient.convertToType(data['message'], 'String');
      if (data.hasOwnProperty('errorMessage'))
        obj.errorMessage = ApiClient.convertToType(data['errorMessage'], 'String');
      if (data.hasOwnProperty('employees'))
        obj.employees = ApiClient.convertToType(data['employees'], [PayrunJobEmployee]);
      if (data.hasOwnProperty('attributes'))
        obj.attributes = ApiClient.convertToType(data['attributes'], {'String': Object});
    }
    return obj;
  }
}

/**
 * The unique object id (immutable)
 * @member {Number} id
 */
PayrunJob.prototype.id = undefined;

/**
 * @member {module:model/ObjectStatus} status
 */
PayrunJob.prototype.status = undefined;

/**
 * The date which the API object was created (immutable)
 * @member {Date} created
 */
PayrunJob.prototype.created = undefined;

/**
 * The date which the API object was last updated (immutable)
 * @member {Date} updated
 */
PayrunJob.prototype.updated = undefined;

/**
 * The payrun job name (immutable)
 * @member {String} name
 */
PayrunJob.prototype.name = undefined;

/**
 * The job owner (immutable)
 * @member {String} owner
 */
PayrunJob.prototype.owner = undefined;

/**
 * The payrun id (immutable)
 * @member {Number} payrunId
 */
PayrunJob.prototype.payrunId = undefined;

/**
 * The payroll id (immutable)
 * @member {Number} payrollId
 */
PayrunJob.prototype.payrollId = undefined;

/**
 * The division id (immutable)
 * @member {Number} divisionId
 */
PayrunJob.prototype.divisionId = undefined;

/**
 * The user id (immutable)
 * @member {Number} userId
 */
PayrunJob.prototype.userId = undefined;

/**
 * The parent payrun job id, e.g. the parent retro pay run job (immutable)
 * @member {Number} parentJobId
 */
PayrunJob.prototype.parentJobId = undefined;

/**
 * @member {module:model/RetroPayMode} retroPayMode
 */
PayrunJob.prototype.retroPayMode = undefined;

/**
 * @member {module:model/PayrunJobStatus} jobStatus
 */
PayrunJob.prototype.jobStatus = undefined;

/**
 * @member {module:model/PayrunJobResult} jobResult
 */
PayrunJob.prototype.jobResult = undefined;

/**
 * The job tags (immutable)
 * @member {Array.<String>} tags
 */
PayrunJob.prototype.tags = undefined;

/**
 * The forecast name (immutable)
 * @member {String} forecast
 */
PayrunJob.prototype.forecast = undefined;

/**
 * The culture including the calendar (immutable)
 * @member {String} culture
 */
PayrunJob.prototype.culture = undefined;

/**
 * The cycle name (immutable)
 * @member {String} cycleName
 */
PayrunJob.prototype.cycleName = undefined;

/**
 * The cycle start date (immutable)
 * @member {Date} cycleStart
 */
PayrunJob.prototype.cycleStart = undefined;

/**
 * The cycle end date (immutable)
 * @member {Date} cycleEnd
 */
PayrunJob.prototype.cycleEnd = undefined;

/**
 * The period name (immutable)
 * @member {String} periodName
 */
PayrunJob.prototype.periodName = undefined;

/**
 * The period start date (immutable)
 * @member {Date} periodStart
 */
PayrunJob.prototype.periodStart = undefined;

/**
 * The period end date (immutable)
 * @member {Date} periodEnd
 */
PayrunJob.prototype.periodEnd = undefined;

/**
 * The evaluation date (immutable)
 * @member {Date} evaluationDate
 */
PayrunJob.prototype.evaluationDate = undefined;

/**
 * The execution reason (immutable)
 * @member {String} reason
 */
PayrunJob.prototype.reason = undefined;

/**
 * Total employee count (immutable)
 * @member {Number} totalEmployeeCount
 */
PayrunJob.prototype.totalEmployeeCount = undefined;

/**
 * Processed employee count (immutable)
 * @member {Number} processedEmployeeCount
 */
PayrunJob.prototype.processedEmployeeCount = undefined;

/**
 * The job start date (immutable)
 * @member {Date} jobStart
 */
PayrunJob.prototype.jobStart = undefined;

/**
 * The job end date (immutable)
 * @member {Date} jobEnd
 */
PayrunJob.prototype.jobEnd = undefined;

/**
 * The job message (immutable)
 * @member {String} message
 */
PayrunJob.prototype.message = undefined;

/**
 * The job error message (immutable)
 * @member {String} errorMessage
 */
PayrunJob.prototype.errorMessage = undefined;

/**
 * The payrun employees
 * @member {Array.<module:model/PayrunJobEmployee>} employees
 */
PayrunJob.prototype.employees = undefined;

/**
 * Custom attributes
 * @member {Object.<String, Object>} attributes
 */
PayrunJob.prototype.attributes = undefined;

