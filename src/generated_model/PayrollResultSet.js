/*
 * Ason Payroll Integration API v1
 * Integration API for the system provider [<a target=\"_blank\" href='https://ason.ch'>v0.3.0-pre-230213</a>]
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {CollectorResultSet} from './CollectorResultSet';
import {ObjectStatus} from './ObjectStatus';
import {PayrunResult} from './PayrunResult';
import {WageTypeResultSet} from './WageTypeResultSet';

/**
 * The PayrollResultSet model module.
 * @module model/PayrollResultSet
 * @version 1
 */
export class PayrollResultSet {
  /**
   * Constructs a new <code>PayrollResultSet</code>.
   * The payroll result set API object
   * @alias module:model/PayrollResultSet
   * @class
   * @param payrollId {Number} The payroll id (immutable)
   * @param payrunJobId {Number} The payrun job id (immutable)
   * @param employeeId {Number} The employee id (immutable)
   * @param divisionId {Number} The division id (immutable)
   * @param cycleName {String} The cycle name (immutable)
   * @param cycleStart {Date} The cycle start date (immutable)
   * @param cycleEnd {Date} The cycle end date (immutable)
   * @param periodName {String} The period name (immutable)
   * @param periodStart {Date} The period start date (immutable)
   */
  constructor(payrollId, payrunJobId, employeeId, divisionId, cycleName, cycleStart, cycleEnd, periodName, periodStart) {
    this.payrollId = payrollId;
    this.payrunJobId = payrunJobId;
    this.employeeId = employeeId;
    this.divisionId = divisionId;
    this.cycleName = cycleName;
    this.cycleStart = cycleStart;
    this.cycleEnd = cycleEnd;
    this.periodName = periodName;
    this.periodStart = periodStart;
  }

  /**
   * Constructs a <code>PayrollResultSet</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PayrollResultSet} obj Optional instance to populate.
   * @return {module:model/PayrollResultSet} The populated <code>PayrollResultSet</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PayrollResultSet();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('status'))
        obj.status = ObjectStatus.constructFromObject(data['status']);
      if (data.hasOwnProperty('created'))
        obj.created = ApiClient.convertToType(data['created'], 'Date');
      if (data.hasOwnProperty('updated'))
        obj.updated = ApiClient.convertToType(data['updated'], 'Date');
      if (data.hasOwnProperty('payrollId'))
        obj.payrollId = ApiClient.convertToType(data['payrollId'], 'Number');
      if (data.hasOwnProperty('payrunId'))
        obj.payrunId = ApiClient.convertToType(data['payrunId'], 'Number');
      if (data.hasOwnProperty('payrunJobId'))
        obj.payrunJobId = ApiClient.convertToType(data['payrunJobId'], 'Number');
      if (data.hasOwnProperty('employeeId'))
        obj.employeeId = ApiClient.convertToType(data['employeeId'], 'Number');
      if (data.hasOwnProperty('divisionId'))
        obj.divisionId = ApiClient.convertToType(data['divisionId'], 'Number');
      if (data.hasOwnProperty('cycleName'))
        obj.cycleName = ApiClient.convertToType(data['cycleName'], 'String');
      if (data.hasOwnProperty('cycleStart'))
        obj.cycleStart = ApiClient.convertToType(data['cycleStart'], 'Date');
      if (data.hasOwnProperty('cycleEnd'))
        obj.cycleEnd = ApiClient.convertToType(data['cycleEnd'], 'Date');
      if (data.hasOwnProperty('periodName'))
        obj.periodName = ApiClient.convertToType(data['periodName'], 'String');
      if (data.hasOwnProperty('periodStart'))
        obj.periodStart = ApiClient.convertToType(data['periodStart'], 'Date');
      if (data.hasOwnProperty('periodEnd'))
        obj.periodEnd = ApiClient.convertToType(data['periodEnd'], 'Date');
      if (data.hasOwnProperty('wageTypeResults'))
        obj.wageTypeResults = ApiClient.convertToType(data['wageTypeResults'], [WageTypeResultSet]);
      if (data.hasOwnProperty('collectorResults'))
        obj.collectorResults = ApiClient.convertToType(data['collectorResults'], [CollectorResultSet]);
      if (data.hasOwnProperty('payrunResults'))
        obj.payrunResults = ApiClient.convertToType(data['payrunResults'], [PayrunResult]);
    }
    return obj;
  }
}

/**
 * The unique object id (immutable)
 * @member {Number} id
 */
PayrollResultSet.prototype.id = undefined;

/**
 * @member {module:model/ObjectStatus} status
 */
PayrollResultSet.prototype.status = undefined;

/**
 * The date which the API object was created (immutable)
 * @member {Date} created
 */
PayrollResultSet.prototype.created = undefined;

/**
 * The date which the API object was last updated (immutable)
 * @member {Date} updated
 */
PayrollResultSet.prototype.updated = undefined;

/**
 * The payroll id (immutable)
 * @member {Number} payrollId
 */
PayrollResultSet.prototype.payrollId = undefined;

/**
 * The payrun id (immutable)
 * @member {Number} payrunId
 */
PayrollResultSet.prototype.payrunId = undefined;

/**
 * The payrun job id (immutable)
 * @member {Number} payrunJobId
 */
PayrollResultSet.prototype.payrunJobId = undefined;

/**
 * The employee id (immutable)
 * @member {Number} employeeId
 */
PayrollResultSet.prototype.employeeId = undefined;

/**
 * The division id (immutable)
 * @member {Number} divisionId
 */
PayrollResultSet.prototype.divisionId = undefined;

/**
 * The cycle name (immutable)
 * @member {String} cycleName
 */
PayrollResultSet.prototype.cycleName = undefined;

/**
 * The cycle start date (immutable)
 * @member {Date} cycleStart
 */
PayrollResultSet.prototype.cycleStart = undefined;

/**
 * The cycle end date (immutable)
 * @member {Date} cycleEnd
 */
PayrollResultSet.prototype.cycleEnd = undefined;

/**
 * The period name (immutable)
 * @member {String} periodName
 */
PayrollResultSet.prototype.periodName = undefined;

/**
 * The period start date (immutable)
 * @member {Date} periodStart
 */
PayrollResultSet.prototype.periodStart = undefined;

/**
 * The period end date (immutable)
 * @member {Date} periodEnd
 */
PayrollResultSet.prototype.periodEnd = undefined;

/**
 * The wage type results
 * @member {Array.<module:model/WageTypeResultSet>} wageTypeResults
 */
PayrollResultSet.prototype.wageTypeResults = undefined;

/**
 * The collector results
 * @member {Array.<module:model/CollectorResultSet>} collectorResults
 */
PayrollResultSet.prototype.collectorResults = undefined;

/**
 * The payrun results
 * @member {Array.<module:model/PayrunResult>} payrunResults
 */
PayrollResultSet.prototype.payrunResults = undefined;

