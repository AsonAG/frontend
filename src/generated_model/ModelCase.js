/*
 * Ason Payroll Integration API v1
 * Integration API for the system provider [<a target=\"_blank\" href='https://ason.ch'>v0.3.0-pre-230213</a>]
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../api/ApiClient';
import {CaseCancellationType} from './CaseCancellationType';
import {CaseFieldReference} from './CaseFieldReference';
import {CaseSlot} from './CaseSlot';
import {CaseType} from './CaseType';
import {ObjectStatus} from './ObjectStatus';
import {OverrideType} from './OverrideType';

/**
 * The ModelCase model module.
 * @module model/ModelCase
 * @version 1
 */
export class ModelCase {
  /**
   * Constructs a new <code>ModelCase</code>.
   * The regulation case API object
   * @alias module:model/ModelCase
   * @class
   * @param caseType {module:model/CaseType} 
   * @param name {String} The case name (immutable)
   */
  constructor(caseType, name) {
    this.caseType = caseType;
    this.name = name;
  }

  /**
   * Constructs a <code>ModelCase</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ModelCase} obj Optional instance to populate.
   * @return {module:model/ModelCase} The populated <code>ModelCase</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ModelCase();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('status'))
        obj.status = ObjectStatus.constructFromObject(data['status']);
      if (data.hasOwnProperty('created'))
        obj.created = ApiClient.convertToType(data['created'], 'Date');
      if (data.hasOwnProperty('updated'))
        obj.updated = ApiClient.convertToType(data['updated'], 'Date');
      if (data.hasOwnProperty('caseType'))
        obj.caseType = CaseType.constructFromObject(data['caseType']);
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('nameLocalizations'))
        obj.nameLocalizations = ApiClient.convertToType(data['nameLocalizations'], {'String': 'String'});
      if (data.hasOwnProperty('nameSynonyms'))
        obj.nameSynonyms = ApiClient.convertToType(data['nameSynonyms'], ['String']);
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('descriptionLocalizations'))
        obj.descriptionLocalizations = ApiClient.convertToType(data['descriptionLocalizations'], {'String': 'String'});
      if (data.hasOwnProperty('defaultReason'))
        obj.defaultReason = ApiClient.convertToType(data['defaultReason'], 'String');
      if (data.hasOwnProperty('defaultReasonLocalizations'))
        obj.defaultReasonLocalizations = ApiClient.convertToType(data['defaultReasonLocalizations'], {'String': 'String'});
      if (data.hasOwnProperty('baseCase'))
        obj.baseCase = ApiClient.convertToType(data['baseCase'], 'String');
      if (data.hasOwnProperty('baseCaseFields'))
        obj.baseCaseFields = ApiClient.convertToType(data['baseCaseFields'], [CaseFieldReference]);
      if (data.hasOwnProperty('overrideType'))
        obj.overrideType = OverrideType.constructFromObject(data['overrideType']);
      if (data.hasOwnProperty('cancellationType'))
        obj.cancellationType = CaseCancellationType.constructFromObject(data['cancellationType']);
      if (data.hasOwnProperty('availableExpression'))
        obj.availableExpression = ApiClient.convertToType(data['availableExpression'], 'String');
      if (data.hasOwnProperty('buildExpression'))
        obj.buildExpression = ApiClient.convertToType(data['buildExpression'], 'String');
      if (data.hasOwnProperty('validateExpression'))
        obj.validateExpression = ApiClient.convertToType(data['validateExpression'], 'String');
      if (data.hasOwnProperty('lookups'))
        obj.lookups = ApiClient.convertToType(data['lookups'], ['String']);
      if (data.hasOwnProperty('slots'))
        obj.slots = ApiClient.convertToType(data['slots'], [CaseSlot]);
      if (data.hasOwnProperty('availableActions'))
        obj.availableActions = ApiClient.convertToType(data['availableActions'], ['String']);
      if (data.hasOwnProperty('buildActions'))
        obj.buildActions = ApiClient.convertToType(data['buildActions'], ['String']);
      if (data.hasOwnProperty('validateActions'))
        obj.validateActions = ApiClient.convertToType(data['validateActions'], ['String']);
      if (data.hasOwnProperty('attributes'))
        obj.attributes = ApiClient.convertToType(data['attributes'], {'String': Object});
      if (data.hasOwnProperty('clusters'))
        obj.clusters = ApiClient.convertToType(data['clusters'], ['String']);
    }
    return obj;
  }
}

/**
 * The unique object id (immutable)
 * @member {Number} id
 */
ModelCase.prototype.id = undefined;

/**
 * @member {module:model/ObjectStatus} status
 */
ModelCase.prototype.status = undefined;

/**
 * The date which the API object was created (immutable)
 * @member {Date} created
 */
ModelCase.prototype.created = undefined;

/**
 * The date which the API object was last updated (immutable)
 * @member {Date} updated
 */
ModelCase.prototype.updated = undefined;

/**
 * @member {module:model/CaseType} caseType
 */
ModelCase.prototype.caseType = undefined;

/**
 * The case name (immutable)
 * @member {String} name
 */
ModelCase.prototype.name = undefined;

/**
 * The localized case names
 * @member {Object.<String, String>} nameLocalizations
 */
ModelCase.prototype.nameLocalizations = undefined;

/**
 * Synonyms for the case name
 * @member {Array.<String>} nameSynonyms
 */
ModelCase.prototype.nameSynonyms = undefined;

/**
 * The case description
 * @member {String} description
 */
ModelCase.prototype.description = undefined;

/**
 * The localized case descriptions
 * @member {Object.<String, String>} descriptionLocalizations
 */
ModelCase.prototype.descriptionLocalizations = undefined;

/**
 * The default case change reason
 * @member {String} defaultReason
 */
ModelCase.prototype.defaultReason = undefined;

/**
 * The localized default case change reasons
 * @member {Object.<String, String>} defaultReasonLocalizations
 */
ModelCase.prototype.defaultReasonLocalizations = undefined;

/**
 * The base case name
 * @member {String} baseCase
 */
ModelCase.prototype.baseCase = undefined;

/**
 * The base case fields
 * @member {Array.<module:model/CaseFieldReference>} baseCaseFields
 */
ModelCase.prototype.baseCaseFields = undefined;

/**
 * @member {module:model/OverrideType} overrideType
 */
ModelCase.prototype.overrideType = undefined;

/**
 * @member {module:model/CaseCancellationType} cancellationType
 */
ModelCase.prototype.cancellationType = undefined;

/**
 * The expression used to build a case
 * @member {String} availableExpression
 */
ModelCase.prototype.availableExpression = undefined;

/**
 * The expression used to build a case
 * @member {String} buildExpression
 */
ModelCase.prototype.buildExpression = undefined;

/**
 * The case validate expression
 * @member {String} validateExpression
 */
ModelCase.prototype.validateExpression = undefined;

/**
 * The case lookups
 * @member {Array.<String>} lookups
 */
ModelCase.prototype.lookups = undefined;

/**
 * The case slots
 * @member {Array.<module:model/CaseSlot>} slots
 */
ModelCase.prototype.slots = undefined;

/**
 * The case available actions
 * @member {Array.<String>} availableActions
 */
ModelCase.prototype.availableActions = undefined;

/**
 * The case build actions
 * @member {Array.<String>} buildActions
 */
ModelCase.prototype.buildActions = undefined;

/**
 * The case validate actions
 * @member {Array.<String>} validateActions
 */
ModelCase.prototype.validateActions = undefined;

/**
 * Custom attributes
 * @member {Object.<String, Object>} attributes
 */
ModelCase.prototype.attributes = undefined;

/**
 * The case clusters
 * @member {Array.<String>} clusters
 */
ModelCase.prototype.clusters = undefined;

