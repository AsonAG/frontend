/*
 * Ason Payroll Integration API v1
 * Integration API for the system provider [<a target=\"_blank\" href='https://ason.ch'>v0.3.0-pre-230213</a>]
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {LogLevel} from './LogLevel';
import {ObjectStatus} from './ObjectStatus';
import {PayrunJobExecutionMode} from './PayrunJobExecutionMode';
import {PayrunJobResult} from './PayrunJobResult';
import {RetroPayMode} from './RetroPayMode';
import {RetroPayrunJob} from './RetroPayrunJob';

/**
 * The PayrunJobInvocation model module.
 * @module model/PayrunJobInvocation
 * @version 1
 */
export class PayrunJobInvocation {
  /**
   * Constructs a new <code>PayrunJobInvocation</code>.
   * The payrun job invocation API object
   * @alias module:model/PayrunJobInvocation
   * @class
   * @param payrunId {Number} The payrun id (immutable)
   * @param payrollId {Number} The payroll id (immutable)
   * @param userId {Number} The user id (immutable)
   * @param name {String} The job name (immutable)
   * @param periodStart {Date} The period start date (immutable)
   * @param reason {String} The execution reason (immutable)
   */
  constructor(payrunId, payrollId, userId, name, periodStart, reason) {
    this.payrunId = payrunId;
    this.payrollId = payrollId;
    this.userId = userId;
    this.name = name;
    this.periodStart = periodStart;
    this.reason = reason;
  }

  /**
   * Constructs a <code>PayrunJobInvocation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PayrunJobInvocation} obj Optional instance to populate.
   * @return {module:model/PayrunJobInvocation} The populated <code>PayrunJobInvocation</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PayrunJobInvocation();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('status'))
        obj.status = ObjectStatus.constructFromObject(data['status']);
      if (data.hasOwnProperty('created'))
        obj.created = ApiClient.convertToType(data['created'], 'Date');
      if (data.hasOwnProperty('updated'))
        obj.updated = ApiClient.convertToType(data['updated'], 'Date');
      if (data.hasOwnProperty('payrunId'))
        obj.payrunId = ApiClient.convertToType(data['payrunId'], 'Number');
      if (data.hasOwnProperty('payrollId'))
        obj.payrollId = ApiClient.convertToType(data['payrollId'], 'Number');
      if (data.hasOwnProperty('userId'))
        obj.userId = ApiClient.convertToType(data['userId'], 'Number');
      if (data.hasOwnProperty('payrunJobId'))
        obj.payrunJobId = ApiClient.convertToType(data['payrunJobId'], 'Number');
      if (data.hasOwnProperty('parentJobId'))
        obj.parentJobId = ApiClient.convertToType(data['parentJobId'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('owner'))
        obj.owner = ApiClient.convertToType(data['owner'], 'String');
      if (data.hasOwnProperty('retroJobs'))
        obj.retroJobs = ApiClient.convertToType(data['retroJobs'], [RetroPayrunJob]);
      if (data.hasOwnProperty('tags'))
        obj.tags = ApiClient.convertToType(data['tags'], ['String']);
      if (data.hasOwnProperty('forecast'))
        obj.forecast = ApiClient.convertToType(data['forecast'], 'String');
      if (data.hasOwnProperty('executionMode'))
        obj.executionMode = PayrunJobExecutionMode.constructFromObject(data['executionMode']);
      if (data.hasOwnProperty('retroPayMode'))
        obj.retroPayMode = RetroPayMode.constructFromObject(data['retroPayMode']);
      if (data.hasOwnProperty('jobResult'))
        obj.jobResult = PayrunJobResult.constructFromObject(data['jobResult']);
      if (data.hasOwnProperty('periodStart'))
        obj.periodStart = ApiClient.convertToType(data['periodStart'], 'Date');
      if (data.hasOwnProperty('evaluationDate'))
        obj.evaluationDate = ApiClient.convertToType(data['evaluationDate'], 'Date');
      if (data.hasOwnProperty('reason'))
        obj.reason = ApiClient.convertToType(data['reason'], 'String');
      if (data.hasOwnProperty('logLevel'))
        obj.logLevel = LogLevel.constructFromObject(data['logLevel']);
      if (data.hasOwnProperty('employeeIdentifiers'))
        obj.employeeIdentifiers = ApiClient.convertToType(data['employeeIdentifiers'], ['String']);
      if (data.hasOwnProperty('attributes'))
        obj.attributes = ApiClient.convertToType(data['attributes'], {'String': Object});
    }
    return obj;
  }
}

/**
 * The unique object id (immutable)
 * @member {Number} id
 */
PayrunJobInvocation.prototype.id = undefined;

/**
 * @member {module:model/ObjectStatus} status
 */
PayrunJobInvocation.prototype.status = undefined;

/**
 * The date which the API object was created (immutable)
 * @member {Date} created
 */
PayrunJobInvocation.prototype.created = undefined;

/**
 * The date which the API object was last updated (immutable)
 * @member {Date} updated
 */
PayrunJobInvocation.prototype.updated = undefined;

/**
 * The payrun id (immutable)
 * @member {Number} payrunId
 */
PayrunJobInvocation.prototype.payrunId = undefined;

/**
 * The payroll id (immutable)
 * @member {Number} payrollId
 */
PayrunJobInvocation.prototype.payrollId = undefined;

/**
 * The user id (immutable)
 * @member {Number} userId
 */
PayrunJobInvocation.prototype.userId = undefined;

/**
 * The payrun job id (immutable)
 * @member {Number} payrunJobId
 */
PayrunJobInvocation.prototype.payrunJobId = undefined;

/**
 * The parent payrun job id, e.g. the parent retro pay run job (immutable)
 * @member {Number} parentJobId
 */
PayrunJobInvocation.prototype.parentJobId = undefined;

/**
 * The job name (immutable)
 * @member {String} name
 */
PayrunJobInvocation.prototype.name = undefined;

/**
 * The job owner (immutable)
 * @member {String} owner
 */
PayrunJobInvocation.prototype.owner = undefined;

/**
 * The retro payrun jobs, requires the ParentJobId (immutable)
 * @member {Array.<module:model/RetroPayrunJob>} retroJobs
 */
PayrunJobInvocation.prototype.retroJobs = undefined;

/**
 * The job tags (immutable)
 * @member {Array.<String>} tags
 */
PayrunJobInvocation.prototype.tags = undefined;

/**
 * The forecast name (immutable)
 * @member {String} forecast
 */
PayrunJobInvocation.prototype.forecast = undefined;

/**
 * @member {module:model/PayrunJobExecutionMode} executionMode
 */
PayrunJobInvocation.prototype.executionMode = undefined;

/**
 * @member {module:model/RetroPayMode} retroPayMode
 */
PayrunJobInvocation.prototype.retroPayMode = undefined;

/**
 * @member {module:model/PayrunJobResult} jobResult
 */
PayrunJobInvocation.prototype.jobResult = undefined;

/**
 * The period start date (immutable)
 * @member {Date} periodStart
 */
PayrunJobInvocation.prototype.periodStart = undefined;

/**
 * The evaluation date (immutable)
 * @member {Date} evaluationDate
 */
PayrunJobInvocation.prototype.evaluationDate = undefined;

/**
 * The execution reason (immutable)
 * @member {String} reason
 */
PayrunJobInvocation.prototype.reason = undefined;

/**
 * @member {module:model/LogLevel} logLevel
 */
PayrunJobInvocation.prototype.logLevel = undefined;

/**
 * The payrun employee identifiers
 * @member {Array.<String>} employeeIdentifiers
 */
PayrunJobInvocation.prototype.employeeIdentifiers = undefined;

/**
 * Payrun job attributes
 * @member {Object.<String, Object>} attributes
 */
PayrunJobInvocation.prototype.attributes = undefined;

