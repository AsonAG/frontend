/*
 * Ason Payroll Integration API v1
 * Integration API for the system provider [<a target=\"_blank\" href='https://ason.ch'>v0.3.0-pre-230213</a>]
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "./ApiClient";
import {ActionInfo} from '../generated_model/ActionInfo';
import {CaseChange} from '../generated_model/CaseChange';
import {CaseChangeSetup} from '../generated_model/CaseChangeSetup';
import {CaseField} from '../generated_model/CaseField';
import {CaseFieldValue} from '../generated_model/CaseFieldValue';
import {CaseRelation} from '../generated_model/CaseRelation';
import {CaseSet} from '../generated_model/CaseSet';
import {CaseType} from '../generated_model/CaseType';
import {CaseValue} from '../generated_model/CaseValue';
import {Collector} from '../generated_model/Collector';
import {FunctionType} from '../generated_model/FunctionType';
import {Language} from '../generated_model/Language';
import {Lookup} from '../generated_model/Lookup';
import {LookupData} from '../generated_model/LookupData';
import {LookupValueData} from '../generated_model/LookupValueData';
import {ModelCase} from '../generated_model/ModelCase';
import {ModelStateEntry} from '../generated_model/ModelStateEntry';
import {ObjectStatus} from '../generated_model/ObjectStatus';
import {OverrideType} from '../generated_model/OverrideType';
import {Payroll} from '../generated_model/Payroll';
import {ProblemDetails} from '../generated_model/ProblemDetails';
import {QueryResultType} from '../generated_model/QueryResultType';
import {Regulation} from '../generated_model/Regulation';
import {ReportSet} from '../generated_model/ReportSet';
import {ReportTemplate} from '../generated_model/ReportTemplate';
import {Script} from '../generated_model/Script';
import {WageType} from '../generated_model/WageType';

/**
* Payrolls service.
* @module api/PayrollsApi
* @version 1
*/
export class PayrollsApi {

    /**
    * Constructs a new PayrollsApi. 
    * @alias module:api/PayrollsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addPayrollCase operation.
     * @callback moduleapi/PayrollsApi~addPayrollCaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseChange{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add case change
     * Request body contains the case change
     * @param {module:model/CaseChangeSetup} body The case change setup
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {module:api/PayrollsApi~addPayrollCaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addPayrollCase(body, tenantId, payrollId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPayrollCase");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling addPayrollCase");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling addPayrollCase");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = CaseChange;

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/cases/sets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the buildPayrollCaseSet operation.
     * @callback moduleapi/PayrollsApi~buildPayrollCaseSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseSet{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Build case with fields and related cases
     * Request body contains array of case values (optional)
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {String} caseName The case name
     * @param {Object} opts Optional parameters
     * @param {module:model/CaseChangeSetup} opts.body The case change setup (optional)
     * @param {Number} opts.employeeId The employee id
     * @param {Number} opts.userId 
     * @param {String} opts.clusterSetName 
     * @param {Date} opts.evaluationDate The evaluation date
     * @param {module:model/Language} opts.language 
     * @param {Date} opts.regulationDate The regulation date
     * @param {module:api/PayrollsApi~buildPayrollCaseSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    buildPayrollCaseSet(tenantId, payrollId, caseName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling buildPayrollCaseSet");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling buildPayrollCaseSet");
      }
      // verify the required parameter 'caseName' is set
      if (caseName === undefined || caseName === null) {
        throw new Error("Missing the required parameter 'caseName' when calling buildPayrollCaseSet");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId,'caseName': caseName
      };
      let queryParams = {
        'employeeId': opts['employeeId'],'userId': opts['userId'],'clusterSetName': opts['clusterSetName'],'evaluationDate': opts['evaluationDate'],'language': opts['language'],'regulationDate': opts['regulationDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = CaseSet;

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/cases/sets/{caseName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPayroll operation.
     * @callback moduleapi/PayrollsApi~createPayrollCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payroll{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new payroll
     * @param {Number} tenantId The tenant id
     * @param {Object} opts Optional parameters
     * @param {module:model/Payroll} opts.body The payroll to add
     * @param {module:api/PayrollsApi~createPayrollCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPayroll(tenantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling createPayroll");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = Payroll;

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePayroll operation.
     * @callback moduleapi/PayrollsApi~deletePayrollCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a payroll
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {module:api/PayrollsApi~deletePayrollCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayroll(tenantId, payrollId, callback) {
      
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling deletePayroll");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling deletePayroll");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePayrollAttribute operation.
     * @callback moduleapi/PayrollsApi~deletePayrollAttributeCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a payroll attribute
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {String} attributeName The attribute name
     * @param {module:api/PayrollsApi~deletePayrollAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletePayrollAttribute(tenantId, payrollId, attributeName, callback) {
      
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling deletePayrollAttribute");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling deletePayrollAttribute");
      }
      // verify the required parameter 'attributeName' is set
      if (attributeName === undefined || attributeName === null) {
        throw new Error("Missing the required parameter 'attributeName' when calling deletePayrollAttribute");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId,'attributeName': attributeName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/attributes/{attributeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayroll operation.
     * @callback moduleapi/PayrollsApi~getPayrollCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payroll{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a payroll
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {module:api/PayrollsApi~getPayrollCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayroll(tenantId, payrollId, callback) {
      
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayroll");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayroll");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Payroll;

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollAttribute operation.
     * @callback moduleapi/PayrollsApi~getPayrollAttributeCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a payroll attribute
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {String} attributeName The attribute name
     * @param {module:api/PayrollsApi~getPayrollAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollAttribute(tenantId, payrollId, attributeName, callback) {
      
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollAttribute");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollAttribute");
      }
      // verify the required parameter 'attributeName' is set
      if (attributeName === undefined || attributeName === null) {
        throw new Error("Missing the required parameter 'attributeName' when calling getPayrollAttribute");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId,'attributeName': attributeName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/attributes/{attributeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollAvailableCaseFieldValues operation.
     * @callback moduleapi/PayrollsApi~getPayrollAvailableCaseFieldValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CaseFieldValue>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available case period values
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Number} userId The user id
     * @param {Array.<String>} caseFieldNames The case field names
     * @param {Date} startDate The time period start date
     * @param {Date} endDate The time period end date
     * @param {Object} opts Optional parameters
     * @param {Number} opts.employeeId The employee id, mandatory for employee case
     * @param {Date} opts.evaluationDate Creation date filter (default: UTC now)
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {module:api/PayrollsApi~getPayrollAvailableCaseFieldValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollAvailableCaseFieldValues(tenantId, payrollId, userId, caseFieldNames, startDate, endDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollAvailableCaseFieldValues");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollAvailableCaseFieldValues");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPayrollAvailableCaseFieldValues");
      }
      // verify the required parameter 'caseFieldNames' is set
      if (caseFieldNames === undefined || caseFieldNames === null) {
        throw new Error("Missing the required parameter 'caseFieldNames' when calling getPayrollAvailableCaseFieldValues");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getPayrollAvailableCaseFieldValues");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getPayrollAvailableCaseFieldValues");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'userId': userId,'caseFieldNames': this.apiClient.buildCollectionParam(caseFieldNames, 'multi'),'startDate': startDate,'endDate': endDate,'employeeId': opts['employeeId'],'evaluationDate': opts['evaluationDate'],'regulationDate': opts['regulationDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CaseFieldValue];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/cases/values/periods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollAvailableCaseSets operation.
     * @callback moduleapi/PayrollsApi~getPayrollAvailableCaseSetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CaseSet>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get active and available case sets
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Number} userId 
     * @param {module:model/CaseType} caseType 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.employeeId The employee id
     * @param {Array.<String>} opts.caseNames 
     * @param {String} opts.clusterSetName 
     * @param {Date} opts.evaluationDate The evaluation date
     * @param {module:model/Language} opts.language 
     * @param {Date} opts.regulationDate The regulation date
     * @param {module:api/PayrollsApi~getPayrollAvailableCaseSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollAvailableCaseSets(tenantId, payrollId, userId, caseType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollAvailableCaseSets");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollAvailableCaseSets");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPayrollAvailableCaseSets");
      }
      // verify the required parameter 'caseType' is set
      if (caseType === undefined || caseType === null) {
        throw new Error("Missing the required parameter 'caseType' when calling getPayrollAvailableCaseSets");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'userId': userId,'caseType': caseType,'employeeId': opts['employeeId'],'caseNames': this.apiClient.buildCollectionParam(opts['caseNames'], 'multi'),'clusterSetName': opts['clusterSetName'],'evaluationDate': opts['evaluationDate'],'language': opts['language'],'regulationDate': opts['regulationDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CaseSet];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/cases/sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollCaseFields operation.
     * @callback moduleapi/PayrollsApi~getPayrollCaseFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CaseField>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll case fields, sorted by order
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.caseFieldNames The case field names (default: all)
     * @param {String} opts.clusterSetName The cluster set name
     * @param {Date} opts.evaluationDate The evaluation date (default: UTC now)
     * @param {module:model/OverrideType} opts.overrideType The override type filter (default: active)
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {module:api/PayrollsApi~getPayrollCaseFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollCaseFields(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollCaseFields");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollCaseFields");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'caseFieldNames': this.apiClient.buildCollectionParam(opts['caseFieldNames'], 'multi'),'clusterSetName': opts['clusterSetName'],'evaluationDate': opts['evaluationDate'],'overrideType': opts['overrideType'],'regulationDate': opts['regulationDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CaseField];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/casefields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollCaseRelations operation.
     * @callback moduleapi/PayrollsApi~getPayrollCaseRelationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CaseRelation>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll case relations, sorted by order
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {String} opts.clusterSetName The cluster set name
     * @param {Date} opts.evaluationDate The evaluation date (default: UTC now)
     * @param {module:model/OverrideType} opts.overrideType The override type filter (default: active)
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {String} opts.sourceCaseName The relation source case name (default: all)
     * @param {String} opts.targetCaseName The relation target case name (default: all)
     * @param {module:api/PayrollsApi~getPayrollCaseRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollCaseRelations(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollCaseRelations");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollCaseRelations");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'clusterSetName': opts['clusterSetName'],'evaluationDate': opts['evaluationDate'],'overrideType': opts['overrideType'],'regulationDate': opts['regulationDate'],'sourceCaseName': opts['sourceCaseName'],'targetCaseName': opts['targetCaseName']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CaseRelation];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/caserelations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollCaseSet operation.
     * @callback moduleapi/PayrollsApi~getPayrollCaseSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseSet{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [DEPRECATED] Build case with fields and related cases
     * Request body contains array of case values (optional)
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {String} caseName The case name
     * @param {Object} opts Optional parameters
     * @param {module:model/CaseChangeSetup} opts.body The case change setup (optional)
     * @param {Number} opts.employeeId The employee id
     * @param {Number} opts.userId 
     * @param {String} opts.clusterSetName 
     * @param {Date} opts.evaluationDate The evaluation date
     * @param {module:model/Language} opts.language 
     * @param {Date} opts.regulationDate The regulation date
     * @param {module:api/PayrollsApi~getPayrollCaseSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollCaseSet(tenantId, payrollId, caseName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollCaseSet");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollCaseSet");
      }
      // verify the required parameter 'caseName' is set
      if (caseName === undefined || caseName === null) {
        throw new Error("Missing the required parameter 'caseName' when calling getPayrollCaseSet");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId,'caseName': caseName
      };
      let queryParams = {
        'employeeId': opts['employeeId'],'userId': opts['userId'],'clusterSetName': opts['clusterSetName'],'evaluationDate': opts['evaluationDate'],'language': opts['language'],'regulationDate': opts['regulationDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = CaseSet;

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/cases/sets/{caseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollCaseValues operation.
     * @callback moduleapi/PayrollsApi~getPayrollCaseValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CaseFieldValue>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get case values
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.employeeId The employee id, mandatory for employee case
     * @param {Array.<String>} opts.caseFieldNames The case field names (default: all)
     * @param {String} opts.caseSlot The case slot
     * @param {Date} opts.endDate The time period end date
     * @param {Date} opts.startDate The time period start date
     * @param {module:api/PayrollsApi~getPayrollCaseValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollCaseValues(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollCaseValues");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollCaseValues");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'employeeId': opts['employeeId'],'caseFieldNames': this.apiClient.buildCollectionParam(opts['caseFieldNames'], 'multi'),'caseSlot': opts['caseSlot'],'endDate': opts['endDate'],'startDate': opts['startDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CaseFieldValue];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/cases/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollCases operation.
     * @callback moduleapi/PayrollsApi~getPayrollCasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelCase>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll cases
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.caseNames The case names (default: all)
     * @param {module:model/CaseType} opts.caseType The case type (default: all)
     * @param {String} opts.clusterSetName The cluster set name
     * @param {Date} opts.evaluationDate The evaluation date (default: UTC now)
     * @param {module:model/OverrideType} opts.overrideType The override type filter (default: active)
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {module:api/PayrollsApi~getPayrollCasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollCases(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollCases");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollCases");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'caseNames': this.apiClient.buildCollectionParam(opts['caseNames'], 'multi'),'caseType': opts['caseType'],'clusterSetName': opts['clusterSetName'],'evaluationDate': opts['evaluationDate'],'overrideType': opts['overrideType'],'regulationDate': opts['regulationDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelCase];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollCollectors operation.
     * @callback moduleapi/PayrollsApi~getPayrollCollectorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Collector>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll collectors
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {String} opts.clusterSetName The cluster set name
     * @param {Array.<String>} opts.collectorNames The collector names filter (Default is all)
     * @param {Date} opts.evaluationDate The evaluation date (default: UTC now)
     * @param {module:model/OverrideType} opts.overrideType The override type filter (default: active)
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {module:api/PayrollsApi~getPayrollCollectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollCollectors(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollCollectors");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollCollectors");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'clusterSetName': opts['clusterSetName'],'collectorNames': this.apiClient.buildCollectionParam(opts['collectorNames'], 'multi'),'evaluationDate': opts['evaluationDate'],'overrideType': opts['overrideType'],'regulationDate': opts['regulationDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Collector];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/collectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollLookupValueData operation.
     * @callback moduleapi/PayrollsApi~getPayrollLookupValueDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LookupValueData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll lookup value data
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {String} lookupName The lookup name
     * @param {Object} opts Optional parameters
     * @param {Date} opts.evaluationDate The evaluation date (default: UTC now)
     * @param {module:model/Language} opts.language The language
     * @param {String} opts.lookupKey The lookup key, optionally with range value
     * @param {Number} opts.rangeValue The lookup range value
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {module:api/PayrollsApi~getPayrollLookupValueDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollLookupValueData(tenantId, payrollId, lookupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollLookupValueData");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollLookupValueData");
      }
      // verify the required parameter 'lookupName' is set
      if (lookupName === undefined || lookupName === null) {
        throw new Error("Missing the required parameter 'lookupName' when calling getPayrollLookupValueData");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'lookupName': lookupName,'evaluationDate': opts['evaluationDate'],'language': opts['language'],'lookupKey': opts['lookupKey'],'rangeValue': opts['rangeValue'],'regulationDate': opts['regulationDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LookupValueData;

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/lookups/values/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollLookupValues operation.
     * @callback moduleapi/PayrollsApi~getPayrollLookupValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LookupData>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll lookup values
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.evaluationDate The evaluation date (default: UTC now)
     * @param {module:model/Language} opts.language The content language
     * @param {Array.<String>} opts.lookupNames The lookup names
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {module:api/PayrollsApi~getPayrollLookupValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollLookupValues(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollLookupValues");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollLookupValues");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'evaluationDate': opts['evaluationDate'],'language': opts['language'],'lookupNames': this.apiClient.buildCollectionParam(opts['lookupNames'], 'multi'),'regulationDate': opts['regulationDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LookupData];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/lookups/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollLookups operation.
     * @callback moduleapi/PayrollsApi~getPayrollLookupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Lookup>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll lookups
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.evaluationDate The evaluation date (default: UTC now)
     * @param {Array.<String>} opts.lookupNames The lookup names filter (default is all)
     * @param {module:model/OverrideType} opts.overrideType The override type filter (default: active)
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {module:api/PayrollsApi~getPayrollLookupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollLookups(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollLookups");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollLookups");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'evaluationDate': opts['evaluationDate'],'lookupNames': this.apiClient.buildCollectionParam(opts['lookupNames'], 'multi'),'overrideType': opts['overrideType'],'regulationDate': opts['regulationDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Lookup];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/lookups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollRegulations operation.
     * @callback moduleapi/PayrollsApi~getPayrollRegulationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Regulation>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll regulations
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.evaluationDate Creation date filter (default: UTC now)
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {module:api/PayrollsApi~getPayrollRegulationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollRegulations(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollRegulations");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollRegulations");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'evaluationDate': opts['evaluationDate'],'regulationDate': opts['regulationDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Regulation];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/regulations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollReportTemplate operation.
     * @callback moduleapi/PayrollsApi~getPayrollReportTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportTemplate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll report template
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Array.<String>} reportNames The report names
     * @param {module:model/Language} language The report language
     * @param {Object} opts Optional parameters
     * @param {Date} opts.evaluationDate The evaluation date (default: UTC now)
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {module:api/PayrollsApi~getPayrollReportTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollReportTemplate(tenantId, payrollId, reportNames, language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollReportTemplate");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollReportTemplate");
      }
      // verify the required parameter 'reportNames' is set
      if (reportNames === undefined || reportNames === null) {
        throw new Error("Missing the required parameter 'reportNames' when calling getPayrollReportTemplate");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getPayrollReportTemplate");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'reportNames': this.apiClient.buildCollectionParam(reportNames, 'multi'),'language': language,'evaluationDate': opts['evaluationDate'],'regulationDate': opts['regulationDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportTemplate;

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/reports/template', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollReports operation.
     * @callback moduleapi/PayrollsApi~getPayrollReportsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReportSet>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll reports
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {String} opts.clusterSetName The cluster set name
     * @param {Date} opts.evaluationDate The evaluation date (default: UTC now)
     * @param {module:model/OverrideType} opts.overrideType The override type filter (default: active)
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {Array.<String>} opts.reportNames The report names filter (Default is all)
     * @param {module:api/PayrollsApi~getPayrollReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollReports(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollReports");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollReports");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'clusterSetName': opts['clusterSetName'],'evaluationDate': opts['evaluationDate'],'overrideType': opts['overrideType'],'regulationDate': opts['regulationDate'],'reportNames': this.apiClient.buildCollectionParam(opts['reportNames'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReportSet];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollScriptActions operation.
     * @callback moduleapi/PayrollsApi~getPayrollScriptActionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActionInfo>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll script actions
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.evaluationDate The evaluation date (default: UTC now)
     * @param {module:model/FunctionType} opts.functionType The function type (default: all)
     * @param {module:model/OverrideType} opts.overrideType The override type filter (default: active)
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {Array.<String>} opts.scriptNames The script names filter (Default is all)
     * @param {module:api/PayrollsApi~getPayrollScriptActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollScriptActions(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollScriptActions");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollScriptActions");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'evaluationDate': opts['evaluationDate'],'functionType': opts['functionType'],'overrideType': opts['overrideType'],'regulationDate': opts['regulationDate'],'scriptNames': this.apiClient.buildCollectionParam(opts['scriptNames'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActionInfo];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollScripts operation.
     * @callback moduleapi/PayrollsApi~getPayrollScriptsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Script>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll scripts
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {Date} opts.evaluationDate The evaluation date (default: UTC now)
     * @param {module:model/OverrideType} opts.overrideType The override type filter (default: active)
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {Array.<String>} opts.scriptNames The script names filter (Default is all)
     * @param {module:api/PayrollsApi~getPayrollScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollScripts(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollScripts");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollScripts");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'evaluationDate': opts['evaluationDate'],'overrideType': opts['overrideType'],'regulationDate': opts['regulationDate'],'scriptNames': this.apiClient.buildCollectionParam(opts['scriptNames'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Script];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/scripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollTimeCaseValues operation.
     * @callback moduleapi/PayrollsApi~getPayrollTimeCaseValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CaseValue>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll case values from a specific time moment
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.employeeId The employee id, mandatory for employee case
     * @param {Array.<String>} opts.caseFieldNames The case field names (default: all)
     * @param {module:model/CaseType} opts.caseType The case type
     * @param {Date} opts.evaluationDate The evaluation date (default: valueDate)
     * @param {Date} opts.regulationDate The regulation date (default: valueDate)
     * @param {Date} opts.valueDate The moment of the value (default: UTC now)
     * @param {module:api/PayrollsApi~getPayrollTimeCaseValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollTimeCaseValues(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollTimeCaseValues");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollTimeCaseValues");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'employeeId': opts['employeeId'],'caseFieldNames': this.apiClient.buildCollectionParam(opts['caseFieldNames'], 'multi'),'caseType': opts['caseType'],'evaluationDate': opts['evaluationDate'],'regulationDate': opts['regulationDate'],'valueDate': opts['valueDate']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CaseValue];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/cases/values/time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPayrollWageTypes operation.
     * @callback moduleapi/PayrollsApi~getPayrollWageTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WageType>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payroll wage types
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Object} opts Optional parameters
     * @param {String} opts.clusterSetName The cluster set name
     * @param {Date} opts.evaluationDate The evaluation date (default: UTC now)
     * @param {module:model/OverrideType} opts.overrideType The override type filter (default: active)
     * @param {Date} opts.regulationDate The regulation date (default: UTC now)
     * @param {Array.<Number>} opts.wageTypeNumbers The wage type numbers (default: all)
     * @param {module:api/PayrollsApi~getPayrollWageTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPayrollWageTypes(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getPayrollWageTypes");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling getPayrollWageTypes");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'clusterSetName': opts['clusterSetName'],'evaluationDate': opts['evaluationDate'],'overrideType': opts['overrideType'],'regulationDate': opts['regulationDate'],'wageTypeNumbers': this.apiClient.buildCollectionParam(opts['wageTypeNumbers'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WageType];

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/wagetypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryPayrollCaseChangeValues operation.
     * @callback moduleapi/PayrollsApi~queryPayrollCaseChangeValuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query payroll case change values
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {Number} userId The user id
     * @param {module:model/CaseType} caseType The case type
     * @param {Object} opts Optional parameters
     * @param {Number} opts.divisionId The division id
     * @param {Number} opts.employeeId The employeeId id, mandatory for employee case
     * @param {String} opts.clusterSetName The cluster set name
     * @param {Date} opts.evaluationDate The evaluation date
     * @param {Boolean} opts.excludeGlobal Exclude global changes
     * @param {String} opts.filter The OData filter expression (with support for attribute fields)
     * @param {module:model/Language} opts.language The language
     * @param {String} opts.orderBy The OData order-by expression (with support for attribute fields)
     * @param {Date} opts.regulationDate The regulation date
     * @param {module:model/QueryResultType} opts.result The query result type: items, count or items with count (default: result items)
     * @param {String} opts.select The OData field selection expression
     * @param {Number} opts.skip The number of items in the queried collection that are to be skipped
     * @param {module:model/ObjectStatus} opts.status The object status (default: all status)
     * @param {Number} opts.top The number of items in the queried collection
     * @param {module:api/PayrollsApi~queryPayrollCaseChangeValuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queryPayrollCaseChangeValues(tenantId, payrollId, userId, caseType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling queryPayrollCaseChangeValues");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling queryPayrollCaseChangeValues");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling queryPayrollCaseChangeValues");
      }
      // verify the required parameter 'caseType' is set
      if (caseType === undefined || caseType === null) {
        throw new Error("Missing the required parameter 'caseType' when calling queryPayrollCaseChangeValues");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        'userId': userId,'caseType': caseType,'divisionId': opts['divisionId'],'employeeId': opts['employeeId'],'clusterSetName': opts['clusterSetName'],'evaluationDate': opts['evaluationDate'],'excludeGlobal': opts['excludeGlobal'],'filter': opts['filter'],'language': opts['language'],'orderBy': opts['orderBy'],'regulationDate': opts['regulationDate'],'result': opts['result'],'select': opts['select'],'skip': opts['skip'],'status': opts['status'],'top': opts['top']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/changes/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryPayrolls operation.
     * @callback moduleapi/PayrollsApi~queryPayrollsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query payrolls
     * @param {Number} tenantId The tenant id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter The OData filter expression (with support for attribute fields)
     * @param {String} opts.orderBy The OData order-by expression (with support for attribute fields)
     * @param {module:model/QueryResultType} opts.result The query result type: items, count or items with count (default: result items)
     * @param {String} opts.select The OData field selection expression
     * @param {Number} opts.skip The number of items in the queried collection that are to be skipped
     * @param {module:model/ObjectStatus} opts.status The object status (default: all status)
     * @param {Number} opts.top The number of items in the queried collection
     * @param {module:api/PayrollsApi~queryPayrollsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queryPayrolls(tenantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling queryPayrolls");
      }

      let pathParams = {
        'tenantId': tenantId
      };
      let queryParams = {
        'filter': opts['filter'],'orderBy': opts['orderBy'],'result': opts['result'],'select': opts['select'],'skip': opts['skip'],'status': opts['status'],'top': opts['top']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setPayrollAttribute operation.
     * @callback moduleapi/PayrollsApi~setPayrollAttributeCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a payroll attribute
     * @param {Number} tenantId The tenant id
     * @param {Number} payrollId The payroll id
     * @param {String} attributeName The attribute name
     * @param {Object} opts Optional parameters
     * @param {String} opts.body The attribute value as JSON
     * @param {module:api/PayrollsApi~setPayrollAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    setPayrollAttribute(tenantId, payrollId, attributeName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling setPayrollAttribute");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling setPayrollAttribute");
      }
      // verify the required parameter 'attributeName' is set
      if (attributeName === undefined || attributeName === null) {
        throw new Error("Missing the required parameter 'attributeName' when calling setPayrollAttribute");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId,'attributeName': attributeName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}/attributes/{attributeName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePayroll operation.
     * @callback moduleapi/PayrollsApi~updatePayrollCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payroll{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a payroll
     * @param {Number} tenantId The tenant id
     * @param {String} payrollId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Payroll} opts.body The payroll with updated values
     * @param {module:api/PayrollsApi~updatePayrollCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePayroll(tenantId, payrollId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling updatePayroll");
      }
      // verify the required parameter 'payrollId' is set
      if (payrollId === undefined || payrollId === null) {
        throw new Error("Missing the required parameter 'payrollId' when calling updatePayroll");
      }

      let pathParams = {
        'tenantId': tenantId,'payrollId': payrollId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = Payroll;

      return this.apiClient.callApi(
        '/api/tenants/{tenantId}/payrolls/{payrollId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}