/*
 * Swagger Payroll API - OpenAPI 3.0
 * This is a base Payrolling API Gateway Server based on Ason Backend.  Some useful links: - [Ason portal](http://ason.ch/)
 *
 * OpenAPI spec version: 1.0.11
 * Contact: mikolaj.sienko@esgroup.ch
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CaseDetails} from '../model/CaseDetails';
import {CaseFieldBasic} from '../model/CaseFieldBasic';
import {CasesArray} from '../model/CasesArray';

/**
* Cases service.
* @module api/CasesApi
* @version 1.0.11
*/
export class CasesApi {

    /**
    * Constructs a new CasesApi. 
    * @alias module:api/CasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getCaseDropdownOptions operation.
     * @callback moduleapi/CasesApi~getCaseDropdownOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseFieldBasic{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets case field dropdown options.
     * @param {String} caseName 
     * @param {module:api/CasesApi~getCaseDropdownOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCaseDropdownOptions(caseName, callback) {
      
      let postBody = null;
      // verify the required parameter 'caseName' is set
      if (caseName === undefined || caseName === null) {
        throw new Error("Missing the required parameter 'caseName' when calling getCaseDropdownOptions");
      }

      let pathParams = {
        'caseName': caseName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CaseFieldBasic;

      return this.apiClient.callApi(
        '/cases/{caseName}/dropdowns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCaseFieldCurrentValues operation.
     * @callback moduleapi/CasesApi~getCaseFieldCurrentValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseFieldBasic{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets case fields with their current values.
     * Returns case fields with their current values. Related cases and related case values are not returned.
     * @param {String} caseName 
     * @param {module:api/CasesApi~getCaseFieldCurrentValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCaseFieldCurrentValues(caseName, callback) {
      
      let postBody = null;
      // verify the required parameter 'caseName' is set
      if (caseName === undefined || caseName === null) {
        throw new Error("Missing the required parameter 'caseName' when calling getCaseFieldCurrentValues");
      }

      let pathParams = {
        'caseName': caseName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CaseFieldBasic;

      return this.apiClient.callApi(
        '/cases/{caseName}/currentValues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCaseFieldValueChanges operation.
     * @callback moduleapi/CasesApi~getCaseFieldValueChangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseDetails{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Build a case and Get case fields values after changes
     * Returs case fields and values along with related cases fields and values. Running this request is required to build a case, before saving it with &#x60;cases/{caseName}/save&#x60;. This request also updates the values and related cases after provided user input as a POST request &#x60;body&#x60;.
     * @param {String} caseName 
     * @param {Object} opts Optional parameters
     * @param {module:model/CaseFieldBasic} opts.body 
     * @param {module:api/CasesApi~getCaseFieldValueChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCaseFieldValueChanges(caseName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'caseName' is set
      if (caseName === undefined || caseName === null) {
        throw new Error("Missing the required parameter 'caseName' when calling getCaseFieldValueChanges");
      }

      let pathParams = {
        'caseName': caseName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CaseDetails;

      return this.apiClient.callApi(
        '/cases/{caseName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCaseFields operation.
     * @callback moduleapi/CasesApi~getCaseFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaseDetails{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Build a case and Get case fields
     * Returs case fields and values along with related cases fields and values. Running this request is required to build a case, before saving it with &#x60;cases/{caseName}/save&#x60;.
     * @param {String} caseName 
     * @param {module:api/CasesApi~getCaseFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCaseFields(caseName, callback) {
      
      let postBody = null;
      // verify the required parameter 'caseName' is set
      if (caseName === undefined || caseName === null) {
        throw new Error("Missing the required parameter 'caseName' when calling getCaseFields");
      }

      let pathParams = {
        'caseName': caseName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CaseDetails;

      return this.apiClient.callApi(
        '/cases/{caseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCases operation.
     * @callback moduleapi/CasesApi~getCasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CasesArray{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all case types available for an employee.
     * @param {module:api/CasesApi~getCasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCases(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CasesArray;

      return this.apiClient.callApi(
        '/cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the saveCase operation.
     * @callback moduleapi/CasesApi~saveCaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a new case
     * Saves a new case&#x27;s values along with it&#x27;s related cases. Before &#x60;/cases/{caseName}/save&#x60; send a build request using either POST or GET &#x60; /cases/{caseName}&#x60;.
     * @param {String} caseName 
     * @param {Object} opts Optional parameters
     * @param {module:model/CaseFieldBasic} opts.body 
     * @param {module:api/CasesApi~saveCaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveCase(caseName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'caseName' is set
      if (caseName === undefined || caseName === null) {
        throw new Error("Missing the required parameter 'caseName' when calling saveCase");
      }

      let pathParams = {
        'caseName': caseName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/cases/{caseName}/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}