/*
 * Swagger Payroll API - OpenAPI 3.0
 * This is a base Payrolling API Gateway Server based on Ason Backend.  Some useful links: - [Ason portal](http://ason.ch/)
 *
 * OpenAPI spec version: 1.0.11
 * Contact: mikolaj.sienko@esgroup.ch
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from "./ApiClient";

/**
 * Documents service.
 * @module api/DocumentsApi
 * @version 1.0.11
 */
export class DocumentsApi {
  /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
  constructor(apiClient, user) {
    this.apiClient = apiClient || ApiClient.instance;
    this.tenantId = user.tenantId;
    this.userId = user.userId;
    this.payrollId = user.currentPayrollId;
  }

  getDocumentLink(documentId, caseValueId, caseType, employeeId) {
    let documentTypePath;
    if (caseType === "Employee") {
      documentTypePath = "/employees/" + employeeId + "/cases/";
    } else {
      documentTypePath =
        "/companycases/";
    }

    return (
      documentTypePath +
      caseValueId +
      "/documents/" +
      documentId
    );
  }

  getDocument(documentId, caseValueId, caseType, employeeId, callback) {
    let postBody = null;
    let pathParams = {};
    let queryParams = {};
    let headerParams = {
    };
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = "";

    return this.apiClient.callApi(
      this.getDocumentLink(documentId, caseValueId, caseType, employeeId),
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
      this.tenantId
    );
  }

  /**
   * Gets a list of documents
   * Gets a list of documents. If the \&quot;taskStatus\&quot; parameter is left empty, all tasks are returned.
   * @param {Object} opts Optional parameters
   * @param {module:model/DocumentStatus} opts.documentStatus
   * @param {module:api/DocumentsApi~getDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  // getDocuments(opts, callback) {
  //   opts = opts || {};
  //   let postBody = null;

  //   let pathParams = {

  //   };
  //   let queryParams = {

  //   };
  //   let headerParams = {
  //     'documentStatus': opts['documentStatus']
  //   };
  //   let formParams = {

  //   };

  //   let authNames = [];
  //   let contentTypes = [];
  //   let accepts = ['application/json'];
  //   let returnType = DocumentsResponseBody;

  //   return this.apiClient.callApi(
  //     '/documents', 'GET',
  //     pathParams, queryParams, headerParams, formParams, postBody,
  //     authNames, contentTypes, accepts, returnType, callback
  //   );
  // }
}

export default DocumentsApi;
